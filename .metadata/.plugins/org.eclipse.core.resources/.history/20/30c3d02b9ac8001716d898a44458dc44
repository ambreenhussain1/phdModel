/**
 */
package WatERP.util;

import WatERP.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see WatERP.WatERPPackage
 * @generated
 */
public class WatERPAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static WatERPPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WatERPAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = WatERPPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WatERPSwitch<Adapter> modelSwitch =
		new WatERPSwitch<Adapter>() {
			@Override
			public Adapter caseModelAnnotation(ModelAnnotation object) {
				return createModelAnnotationAdapter();
			}
			@Override
			public Adapter caseClassAnnotation(ClassAnnotation object) {
				return createClassAnnotationAdapter();
			}
			@Override
			public Adapter caseOntology(Ontology object) {
				return createOntologyAdapter();
			}
			@Override
			public Adapter caseModel(Model object) {
				return createModelAdapter();
			}
			@Override
			public Adapter casePropertyAnnotation(PropertyAnnotation object) {
				return createPropertyAnnotationAdapter();
			}
			@Override
			public Adapter caseExpression(Expression object) {
				return createExpressionAdapter();
			}
			@Override
			public Adapter caseProperty(Property object) {
				return createPropertyAdapter();
			}
			@Override
			public Adapter caseMClass(MClass object) {
				return createMClassAdapter();
			}
			@Override
			public Adapter caseMProperty(MProperty object) {
				return createMPropertyAdapter();
			}
			@Override
			public Adapter caseMCProperty(MCProperty object) {
				return createMCPropertyAdapter();
			}
			@Override
			public Adapter caseMDProperty(MDProperty object) {
				return createMDPropertyAdapter();
			}
			@Override
			public Adapter caseOClass(OClass object) {
				return createOClassAdapter();
			}
			@Override
			public Adapter caseOProperty(OProperty object) {
				return createOPropertyAdapter();
			}
			@Override
			public Adapter caseOntologyConstraint(OntologyConstraint object) {
				return createOntologyConstraintAdapter();
			}
			@Override
			public Adapter caseEquivalence(Equivalence object) {
				return createEquivalenceAdapter();
			}
			@Override
			public Adapter caseUnionClass(UnionClass object) {
				return createUnionClassAdapter();
			}
			@Override
			public Adapter caseObjectProperty(ObjectProperty object) {
				return createObjectPropertyAdapter();
			}
			@Override
			public Adapter caseRestriction(Restriction object) {
				return createRestrictionAdapter();
			}
			@Override
			public Adapter caseHasDataValueRestriction(HasDataValueRestriction object) {
				return createHasDataValueRestrictionAdapter();
			}
			@Override
			public Adapter caseAllValuesFromRestriction(AllValuesFromRestriction object) {
				return createAllValuesFromRestrictionAdapter();
			}
			@Override
			public Adapter caseAllValuesFromDataRestriction(AllValuesFromDataRestriction object) {
				return createAllValuesFromDataRestrictionAdapter();
			}
			@Override
			public Adapter caseAllValuesFromClassRestriction(AllValuesFromClassRestriction object) {
				return createAllValuesFromClassRestrictionAdapter();
			}
			@Override
			public Adapter caseDataProperty(DataProperty object) {
				return createDataPropertyAdapter();
			}
			@Override
			public Adapter caseSomeValuesFromRestriction(SomeValuesFromRestriction object) {
				return createSomeValuesFromRestrictionAdapter();
			}
			@Override
			public Adapter caseSomeValuesFromDataRestriction(SomeValuesFromDataRestriction object) {
				return createSomeValuesFromDataRestrictionAdapter();
			}
			@Override
			public Adapter caseSomeValuesFromClassRestriction(SomeValuesFromClassRestriction object) {
				return createSomeValuesFromClassRestrictionAdapter();
			}
			@Override
			public Adapter caseCardinalityRestriction(CardinalityRestriction object) {
				return createCardinalityRestrictionAdapter();
			}
			@Override
			public Adapter caseMaximumCardinalityRestriction(MaximumCardinalityRestriction object) {
				return createMaximumCardinalityRestrictionAdapter();
			}
			@Override
			public Adapter caseMinimumCardinalityRestriction(MinimumCardinalityRestriction object) {
				return createMinimumCardinalityRestrictionAdapter();
			}
			@Override
			public Adapter caseTopNode(TopNode object) {
				return createTopNodeAdapter();
			}
			@Override
			public Adapter caseObservation(Observation object) {
				return createObservationAdapter();
			}
			@Override
			public Adapter caseSensor(Sensor object) {
				return createSensorAdapter();
			}
			@Override
			public Adapter caseExport(Export object) {
				return createExportAdapter();
			}
			@Override
			public Adapter caseObservedProperty(ObservedProperty object) {
				return createObservedPropertyAdapter();
			}
			@Override
			public Adapter caseDLSafeRule(DLSafeRule object) {
				return createDLSafeRuleAdapter();
			}
			@Override
			public Adapter caseHead(Head object) {
				return createHeadAdapter();
			}
			@Override
			public Adapter caseBody(Body object) {
				return createBodyAdapter();
			}
			@Override
			public Adapter caseAtom(Atom object) {
				return createAtomAdapter();
			}
			@Override
			public Adapter caseObjectPropertyAtom(ObjectPropertyAtom object) {
				return createObjectPropertyAtomAdapter();
			}
			@Override
			public Adapter caseClassAtom(ClassAtom object) {
				return createClassAtomAdapter();
			}
			@Override
			public Adapter caseVariable(Variable object) {
				return createVariableAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@link WatERP.ModelAnnotation <em>Model Annotation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.ModelAnnotation
	 * @generated
	 */
	public Adapter createModelAnnotationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.ClassAnnotation <em>Class Annotation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.ClassAnnotation
	 * @generated
	 */
	public Adapter createClassAnnotationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Ontology <em>Ontology</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Ontology
	 * @generated
	 */
	public Adapter createOntologyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Model <em>Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Model
	 * @generated
	 */
	public Adapter createModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.PropertyAnnotation <em>Property Annotation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.PropertyAnnotation
	 * @generated
	 */
	public Adapter createPropertyAnnotationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Expression <em>Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Expression
	 * @generated
	 */
	public Adapter createExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Property <em>Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Property
	 * @generated
	 */
	public Adapter createPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.MClass <em>MClass</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.MClass
	 * @generated
	 */
	public Adapter createMClassAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.MProperty <em>MProperty</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.MProperty
	 * @generated
	 */
	public Adapter createMPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.MCProperty <em>MC Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.MCProperty
	 * @generated
	 */
	public Adapter createMCPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.MDProperty <em>MD Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.MDProperty
	 * @generated
	 */
	public Adapter createMDPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.OClass <em>OClass</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.OClass
	 * @generated
	 */
	public Adapter createOClassAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.OProperty <em>OProperty</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.OProperty
	 * @generated
	 */
	public Adapter createOPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.OntologyConstraint <em>Ontology Constraint</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.OntologyConstraint
	 * @generated
	 */
	public Adapter createOntologyConstraintAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Equivalence <em>Equivalence</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Equivalence
	 * @generated
	 */
	public Adapter createEquivalenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.UnionClass <em>Union Class</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.UnionClass
	 * @generated
	 */
	public Adapter createUnionClassAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.ObjectProperty <em>Object Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.ObjectProperty
	 * @generated
	 */
	public Adapter createObjectPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Restriction <em>Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Restriction
	 * @generated
	 */
	public Adapter createRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.HasDataValueRestriction <em>Has Data Value Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.HasDataValueRestriction
	 * @generated
	 */
	public Adapter createHasDataValueRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.AllValuesFromRestriction <em>All Values From Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.AllValuesFromRestriction
	 * @generated
	 */
	public Adapter createAllValuesFromRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.AllValuesFromDataRestriction <em>All Values From Data Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.AllValuesFromDataRestriction
	 * @generated
	 */
	public Adapter createAllValuesFromDataRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.AllValuesFromClassRestriction <em>All Values From Class Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.AllValuesFromClassRestriction
	 * @generated
	 */
	public Adapter createAllValuesFromClassRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.DataProperty <em>Data Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.DataProperty
	 * @generated
	 */
	public Adapter createDataPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.SomeValuesFromRestriction <em>Some Values From Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.SomeValuesFromRestriction
	 * @generated
	 */
	public Adapter createSomeValuesFromRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.SomeValuesFromDataRestriction <em>Some Values From Data Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.SomeValuesFromDataRestriction
	 * @generated
	 */
	public Adapter createSomeValuesFromDataRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.SomeValuesFromClassRestriction <em>Some Values From Class Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.SomeValuesFromClassRestriction
	 * @generated
	 */
	public Adapter createSomeValuesFromClassRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.CardinalityRestriction <em>Cardinality Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.CardinalityRestriction
	 * @generated
	 */
	public Adapter createCardinalityRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.MaximumCardinalityRestriction <em>Maximum Cardinality Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.MaximumCardinalityRestriction
	 * @generated
	 */
	public Adapter createMaximumCardinalityRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.MinimumCardinalityRestriction <em>Minimum Cardinality Restriction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.MinimumCardinalityRestriction
	 * @generated
	 */
	public Adapter createMinimumCardinalityRestrictionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.TopNode <em>Top Node</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.TopNode
	 * @generated
	 */
	public Adapter createTopNodeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Observation <em>Observation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Observation
	 * @generated
	 */
	public Adapter createObservationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Sensor <em>Sensor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Sensor
	 * @generated
	 */
	public Adapter createSensorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Export <em>Export</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Export
	 * @generated
	 */
	public Adapter createExportAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.ObservedProperty <em>Observed Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.ObservedProperty
	 * @generated
	 */
	public Adapter createObservedPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.DLSafeRule <em>DL Safe Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.DLSafeRule
	 * @generated
	 */
	public Adapter createDLSafeRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Head <em>Head</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Head
	 * @generated
	 */
	public Adapter createHeadAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Body <em>Body</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Body
	 * @generated
	 */
	public Adapter createBodyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Atom <em>Atom</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Atom
	 * @generated
	 */
	public Adapter createAtomAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.ObjectPropertyAtom <em>Object Property Atom</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.ObjectPropertyAtom
	 * @generated
	 */
	public Adapter createObjectPropertyAtomAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.ClassAtom <em>Class Atom</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.ClassAtom
	 * @generated
	 */
	public Adapter createClassAtomAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link WatERP.Variable <em>Variable</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see WatERP.Variable
	 * @generated
	 */
	public Adapter createVariableAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //WatERPAdapterFactory
